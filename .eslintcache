[{"/Users/apollo/Desktop/it/itkamasutra/src/serviceWorker.js":"1","/Users/apollo/Desktop/it/itkamasutra/src/redux/app-reducer.ts":"2","/Users/apollo/Desktop/it/itkamasutra/src/redux/users-reducer.ts":"3","/Users/apollo/Desktop/it/itkamasutra/src/redux/profile-reducer.ts":"4","/Users/apollo/Desktop/it/itkamasutra/src/redux/dialogs-reducer.ts":"5","/Users/apollo/Desktop/it/itkamasutra/src/redux/sidebar-reducer.ts":"6","/Users/apollo/Desktop/it/itkamasutra/src/redux/auth-reducer.ts":"7","/Users/apollo/Desktop/it/itkamasutra/src/components/common/Paginator/Paginator.tsx":"8","/Users/apollo/Desktop/it/itkamasutra/src/redux/redux-store.ts":"9","/Users/apollo/Desktop/it/itkamasutra/src/components/Users/UsersContainer.tsx":"10","/Users/apollo/Desktop/it/itkamasutra/src/redux/users-selectors.ts":"11","/Users/apollo/Desktop/it/itkamasutra/src/components/Users/Users.tsx":"12","/Users/apollo/Desktop/it/itkamasutra/src/api/api.ts":"13","/Users/apollo/Desktop/it/itkamasutra/src/components/Login/Login.tsx":"14","/Users/apollo/Desktop/it/itkamasutra/src/utils/validators/validators.ts":"15","/Users/apollo/Desktop/it/itkamasutra/src/components/common/FormsControls/FormsControls.tsx":"16","/Users/apollo/Desktop/it/itkamasutra/src/api/security-api.ts":"17","/Users/apollo/Desktop/it/itkamasutra/src/api/auth-api.ts":"18","/Users/apollo/Desktop/it/itkamasutra/src/api/profile-api.ts":"19","/Users/apollo/Desktop/it/itkamasutra/src/index.tsx":"20","/Users/apollo/Desktop/it/itkamasutra/src/App.tsx":"21","/Users/apollo/Desktop/it/itkamasutra/src/hoc/withSuspense.tsx":"22","/Users/apollo/Desktop/it/itkamasutra/src/components/Header/HeaderContainer.tsx":"23","/Users/apollo/Desktop/it/itkamasutra/src/components/Navbar/Navbar.tsx":"24","/Users/apollo/Desktop/it/itkamasutra/src/components/Profile/ProfileContainer.tsx":"25","/Users/apollo/Desktop/it/itkamasutra/src/components/Dialogs/DialogsContainer.tsx":"26","/Users/apollo/Desktop/it/itkamasutra/src/components/common/Preloader/Preloader.tsx":"27","/Users/apollo/Desktop/it/itkamasutra/src/components/Profile/Profile.tsx":"28","/Users/apollo/Desktop/it/itkamasutra/src/components/Header/Header.tsx":"29","/Users/apollo/Desktop/it/itkamasutra/src/components/Dialogs/Dialogs.tsx":"30","/Users/apollo/Desktop/it/itkamasutra/src/hoc/withAuthRedirect.tsx":"31","/Users/apollo/Desktop/it/itkamasutra/src/utils/object-helpers.ts":"32","/Users/apollo/Desktop/it/itkamasutra/src/api/users-api.ts":"33","/Users/apollo/Desktop/it/itkamasutra/src/components/Users/User.tsx":"34","/Users/apollo/Desktop/it/itkamasutra/src/components/Profile/ProfileInfo/ProfileInfo.tsx":"35","/Users/apollo/Desktop/it/itkamasutra/src/components/Profile/MyPosts/MyPostsContainer.tsx":"36","/Users/apollo/Desktop/it/itkamasutra/src/components/Dialogs/Message/Message.tsx":"37","/Users/apollo/Desktop/it/itkamasutra/src/components/Dialogs/DialogItem/DialogItem.tsx":"38","/Users/apollo/Desktop/it/itkamasutra/src/components/Dialogs/AddMessageForm/AddMessageForm.tsx":"39","/Users/apollo/Desktop/it/itkamasutra/src/components/Profile/ProfileInfo/ProfileDataForm.tsx":"40","/Users/apollo/Desktop/it/itkamasutra/src/components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx":"41","/Users/apollo/Desktop/it/itkamasutra/src/components/Profile/MyPosts/MyPosts.tsx":"42","/Users/apollo/Desktop/it/itkamasutra/src/components/Profile/MyPosts/AddPostForm/AddPostForm.tsx":"43","/Users/apollo/Desktop/it/itkamasutra/src/components/Profile/MyPosts/Post/Post.tsx":"44","/Users/apollo/Desktop/it/itkamasutra/src/components/Users/UsersSearchForm.tsx":"45"},{"size":4948,"mtime":1614165149545,"results":"46","hashOfConfig":"47"},{"size":907,"mtime":1615616863401,"results":"48","hashOfConfig":"47"},{"size":4710,"mtime":1615808284194,"results":"49","hashOfConfig":"47"},{"size":3720,"mtime":1615616863402,"results":"50","hashOfConfig":"47"},{"size":1308,"mtime":1615616863401,"results":"51","hashOfConfig":"47"},{"size":182,"mtime":1615384454557,"results":"52","hashOfConfig":"47"},{"size":2824,"mtime":1615616863401,"results":"53","hashOfConfig":"47"},{"size":1772,"mtime":1615616863399,"results":"54","hashOfConfig":"47"},{"size":1311,"mtime":1615808303447,"results":"55","hashOfConfig":"47"},{"size":2950,"mtime":1615808303447,"results":"56","hashOfConfig":"47"},{"size":900,"mtime":1615808284194,"results":"57","hashOfConfig":"47"},{"size":1467,"mtime":1615808303446,"results":"58","hashOfConfig":"47"},{"size":645,"mtime":1615887432741,"results":"59","hashOfConfig":"47"},{"size":2620,"mtime":1615808303446,"results":"60","hashOfConfig":"47"},{"size":389,"mtime":1615384454558,"results":"61","hashOfConfig":"47"},{"size":1841,"mtime":1615808303447,"results":"62","hashOfConfig":"47"},{"size":252,"mtime":1615616863395,"results":"63","hashOfConfig":"47"},{"size":744,"mtime":1615616863395,"results":"64","hashOfConfig":"47"},{"size":1079,"mtime":1615616863395,"results":"65","hashOfConfig":"47"},{"size":477,"mtime":1615616863400,"results":"66","hashOfConfig":"47"},{"size":3074,"mtime":1615808303445,"results":"67","hashOfConfig":"47"},{"size":280,"mtime":1615616863400,"results":"68","hashOfConfig":"47"},{"size":626,"mtime":1615808303446,"results":"69","hashOfConfig":"47"},{"size":953,"mtime":1615616863396,"results":"70","hashOfConfig":"47"},{"size":2674,"mtime":1615616863397,"results":"71","hashOfConfig":"47"},{"size":528,"mtime":1615616863396,"results":"72","hashOfConfig":"47"},{"size":275,"mtime":1615616863399,"results":"73","hashOfConfig":"47"},{"size":889,"mtime":1615616863397,"results":"74","hashOfConfig":"47"},{"size":710,"mtime":1615808303446,"results":"75","hashOfConfig":"47"},{"size":1294,"mtime":1615616863396,"results":"76","hashOfConfig":"47"},{"size":890,"mtime":1615616863400,"results":"77","hashOfConfig":"47"},{"size":258,"mtime":1615616863403,"results":"78","hashOfConfig":"47"},{"size":644,"mtime":1615808284190,"results":"79","hashOfConfig":"47"},{"size":1697,"mtime":1615887834922,"results":"80","hashOfConfig":"47"},{"size":3127,"mtime":1615616863397,"results":"81","hashOfConfig":"47"},{"size":550,"mtime":1615616863397,"results":"82","hashOfConfig":"47"},{"size":246,"mtime":1615616863396,"results":"83","hashOfConfig":"47"},{"size":405,"mtime":1615616863395,"results":"84","hashOfConfig":"47"},{"size":1092,"mtime":1615808303445,"results":"85","hashOfConfig":"47"},{"size":1875,"mtime":1615616863397,"results":"86","hashOfConfig":"47"},{"size":1181,"mtime":1615616863398,"results":"87","hashOfConfig":"47"},{"size":1218,"mtime":1615616863397,"results":"88","hashOfConfig":"47"},{"size":950,"mtime":1615616863396,"results":"89","hashOfConfig":"47"},{"size":464,"mtime":1615616863397,"results":"90","hashOfConfig":"47"},{"size":1565,"mtime":1615808303447,"results":"91","hashOfConfig":"47"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},"1b6t0hn",{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"97"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"97"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"97"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"97"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"97"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"125","messages":"126","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"97"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"97"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149","usedDeprecatedRules":"97"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152","usedDeprecatedRules":"97"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157","usedDeprecatedRules":"97"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"162","usedDeprecatedRules":"97"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165","usedDeprecatedRules":"97"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"174","messages":"175","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"176","usedDeprecatedRules":"97"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"179","usedDeprecatedRules":"97"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"186","usedDeprecatedRules":"97"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"193","usedDeprecatedRules":"97"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"198","usedDeprecatedRules":"97"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"201","usedDeprecatedRules":"97"},"/Users/apollo/Desktop/it/itkamasutra/src/serviceWorker.js",[],["202","203"],"/Users/apollo/Desktop/it/itkamasutra/src/redux/app-reducer.ts",[],["204","205"],"/Users/apollo/Desktop/it/itkamasutra/src/redux/users-reducer.ts",["206","207"],"import {updateObjectInArray} from '../utils/object-helpers'\nimport {UserType} from '../types/types'\nimport {BaseThunkType, InferActionsTypes} from './redux-store'\nimport {Dispatch} from 'redux'\nimport {usersAPI} from '../api/users-api'\nimport {APIResponseType} from '../api/api'\n\nlet initialState = {\n    users: [] as Array<UserType>,\n    pageSize: 10,\n    totalUsersCount: 0,\n    currentPage: 1,\n    isFetching: true,\n    followingInProgress: [] as Array<number>, //array of users ids,\n    filter: {\n        term: '',\n        friend: null as null | boolean\n    }\n}\n\nconst usersReducer = (state = initialState, action: ActionsTypes): InitialState => {\n    switch (action.type) {\n        case 'SN/USERS/FOLLOW':\n            return {\n                ...state,\n                users: updateObjectInArray(state.users, action.userId, 'id', {followed: true})\n            }\n        case 'SN/USERS/UNFOLLOW':\n            return {\n                ...state,\n                users: updateObjectInArray(state.users, action.userId, 'id', {followed: false})\n            }\n        case 'SN/USERS/SET_USERS': {\n            return {...state, users: action.users}\n        }\n        case 'SN/USERS/SET_CURRENT_PAGE': {\n            return {...state, currentPage: action.currentPage}\n        }\n        case 'SN/USERS/SET_TOTAL_USERS_COUNT': {\n            return {...state, totalUsersCount: action.count}\n        }\n        case 'SN/USERS/TOGGLE_IS_FETCHING': {\n            return {...state, isFetching: action.isFetching}\n        }\n        case 'SN/USERS/SET_FILTER': {\n            return {...state, filter: action.payload}\n        }\n        case 'SN/USERS/TOGGLE_IS_FOLLOWING_PROGRESS': {\n            return {\n                ...state,\n                followingInProgress: action.isFetching\n                    ? [...state.followingInProgress, action.userId]\n                    : state.followingInProgress.filter(id => id != action.userId)\n            }\n        }\n        default:\n            return state\n    }\n}\n\nexport const actions = {\n    followSuccess: (userId: number) => ({type: 'SN/USERS/FOLLOW', userId} as const),\n    unfollowSuccess: (userId: number) => ({type: 'SN/USERS/UNFOLLOW', userId} as const),\n    setUsers: (users: Array<UserType>) => ({type: 'SN/USERS/SET_USERS', users} as const),\n    setCurrentPage: (currentPage: number) => ({type: 'SN/USERS/SET_CURRENT_PAGE', currentPage} as const),\n    setFilter: (filter: FilterType) => ({type: 'SN/USERS/SET_FILTER', payload: filter} as const),\n    setTotalUsersCount: (totalUsersCount: number) => ({\n        type: 'SN/USERS/SET_TOTAL_USERS_COUNT',\n        count: totalUsersCount\n    } as const),\n    toggleIsFetching: (isFetching: boolean) => ({\n        type: 'SN/USERS/TOGGLE_IS_FETCHING',\n        isFetching\n    } as const),\n    toggleFollowingProgress: (isFetching: boolean, userId: number) => ({\n        type: 'SN/USERS/TOGGLE_IS_FOLLOWING_PROGRESS',\n        isFetching,\n        userId\n    } as const)\n}\n\nexport const requestUsers = (page: number,\n                             pageSize: number, filter: FilterType): ThunkType => {\n    return async (dispatch, getState) => {\n        dispatch(actions.toggleIsFetching(true))\n        dispatch(actions.setCurrentPage(page))\n        dispatch(actions.setFilter(filter))\n\n        let data = await usersAPI.getUsers(page, pageSize, filter.term, filter.friend)\n        dispatch(actions.toggleIsFetching(false))\n        dispatch(actions.setUsers(data.items))\n        dispatch(actions.setTotalUsersCount(data.totalCount))\n    }\n}\n\nconst _followUnfollowFlow = async (dispatch: Dispatch<ActionsTypes>,\n                                   userId: number,\n                                   apiMethod: (userId: number) => Promise<APIResponseType>,\n                                   actionCreator: (userId: number) => ActionsTypes) => {\n    dispatch(actions.toggleFollowingProgress(true, userId))\n    let response = await apiMethod(userId)\n\n    if (response.resultCode == 0) {\n        dispatch(actionCreator(userId))\n    }\n    dispatch(actions.toggleFollowingProgress(false, userId))\n}\n\nexport const follow = (userId: number): ThunkType => {\n    return async (dispatch) => {\n        await _followUnfollowFlow(dispatch, userId, usersAPI.follow.bind(usersAPI), actions.followSuccess)\n    }\n}\n\nexport const unfollow = (userId: number): ThunkType => {\n    return async (dispatch) => {\n        await _followUnfollowFlow(dispatch, userId, usersAPI.unfollow.bind(usersAPI), actions.unfollowSuccess)\n    }\n}\n\nexport default usersReducer\n\nexport type InitialState = typeof initialState\nexport type FilterType = typeof initialState.filter\ntype ActionsTypes = InferActionsTypes<typeof actions>\ntype ThunkType = BaseThunkType<ActionsTypes>\n","/Users/apollo/Desktop/it/itkamasutra/src/redux/profile-reducer.ts",["208","209"],"import {FormAction, stopSubmit} from \"redux-form\";\nimport {PhotosType, PostType, ProfileType} from '../types/types';\nimport {usersAPI} from '../api/users-api';\nimport {profileAPI} from '../api/profile-api';\nimport {BaseThunkType, InferActionsTypes} from './redux-store';\n\nlet initialState = {\n    posts: [\n        {id: 1, message: 'Hi, how are you?', likesCount: 12},\n        {id: 2, message: 'It\\'s my first post', likesCount: 11},\n        {id: 3, message: 'Blabla', likesCount: 11},\n        {id: 4, message: 'Dada', likesCount: 11}\n    ] as Array<PostType>,\n    profile: null as ProfileType | null,\n    status: '',\n}\n\nconst profileReducer = (state = initialState, action: ActionsType): InitialStateType => {\n\n    switch (action.type) {\n        case 'SN/PROFILE/ADD-POST': {\n            let newPost = {\n                id: 5,\n                message: action.newPostText,\n                likesCount: 0\n            };\n            return {\n                ...state,\n                posts: [...state.posts, newPost],\n            };\n        }\n        case 'SN/PROFILE/SET_STATUS': {\n            return {\n                ...state,\n                status: action.status\n            }\n        }\n        case 'SN/PROFILE/SET_USER_PROFILE': {\n            return {...state, profile: action.profile}\n        }\n\n        case 'SN/PROFILE/DELETE_POST':\n            return {...state, posts: state.posts.filter(p => p.id != action.postId)}\n\n        case 'SN/PROFILE/SAVE_PHOTO_SUCCESS':\n            return {...state, profile: {...state.profile, photos: action.photos} as ProfileType}\n        default:\n            return state;\n    }\n}\n\n\nexport const actions = {\n    addPostActionCreator: (newPostText: string) => ({type: 'SN/PROFILE/ADD-POST', newPostText} as const),\n    setUserProfile: (profile: ProfileType) => ({type: 'SN/PROFILE/SET_USER_PROFILE', profile} as const),\n    setStatus: (status: string) => ({type: 'SN/PROFILE/SET_STATUS', status} as const),\n    deletePost: (postId: number) => ({type: 'SN/PROFILE/DELETE_POST', postId} as const),\n    savePhotoSuccess: (photos: PhotosType) => ({type: 'SN/PROFILE/SAVE_PHOTO_SUCCESS', photos} as const)\n}\n\nexport const getUserProfile = (userId: number): ThunkType => async (dispatch) => {\n    const data = await profileAPI.getProfile(userId)\n    dispatch(actions.setUserProfile(data))\n}\n\nexport const getStatus = (userId: number): ThunkType => async (dispatch) => {\n    let data = await profileAPI.getStatus(userId)\n    dispatch(actions.setStatus(data))\n}\n\nexport const updateStatus = (status: string): ThunkType => async (dispatch) => {\n    try {\n        let data = await profileAPI.updateStatus(status)\n\n        if (data.resultCode === 0) {\n            dispatch(actions.setStatus(status))\n        }\n    } catch(error) {\n        //\n    }\n}\n\nexport const savePhoto = (file: File): ThunkType => async (dispatch) => {\n    let data = await profileAPI.savePhoto(file)\n\n    if (data.resultCode === 0) {\n        dispatch(actions.savePhotoSuccess(data.data.photos))\n    }\n}\n\nexport const saveProfile = (profile: ProfileType): ThunkType => async (dispatch, getState) => {\n    const userId = getState().auth.userId\n    const data = await profileAPI.saveProfile(profile)\n\n    if (data.resultCode === 0) {\n        if (userId != null) {\n            dispatch(getUserProfile(userId))\n        } else {\n            throw new Error(\"userId can't be null\")\n        }\n    } else {\n        dispatch(stopSubmit(\"edit-profile\", {_error: data.messages[0] }))\n        return Promise.reject(data.messages[0])\n    }\n}\n\nexport default profileReducer\n\nexport type InitialStateType = typeof initialState\ntype ActionsType = InferActionsTypes<typeof actions>\ntype ThunkType = BaseThunkType<ActionsType | FormAction>\n","/Users/apollo/Desktop/it/itkamasutra/src/redux/dialogs-reducer.ts",[],"/Users/apollo/Desktop/it/itkamasutra/src/redux/sidebar-reducer.ts",["210"],"let initialState = {}\ntype InitialStateType = typeof initialState\nconst sidebarReducer = (state = initialState, action: any) => {\n    return state;\n}\n\nexport default sidebarReducer;\n","/Users/apollo/Desktop/it/itkamasutra/src/redux/auth-reducer.ts",["211"],"import {ResultCodeForCapcthaEnum, ResultCodesEnum} from \"../api/api\";\nimport {stopSubmit} from \"redux-form\";\nimport {authAPI} from '../api/auth-api';\nimport {securityAPI} from '../api/security-api';\nimport {BaseThunkType, InferActionsTypes} from './redux-store';\nimport {Action} from 'redux';\nimport {FormAction} from 'redux-form/lib/actions';\n\nlet initialState = {\n    userId: null as (number | null),\n    email: null as string | null,\n    login: null as string | null,\n    isAuth: false,\n    captchaUrl: null as string | null// if null, then captcha is not required\n};\n\nconst authReducer = (state = initialState, action: ActionsType): InitialStateType => {\n    switch (action.type) {\n        case 'SN/auth/SET_USER_DATA':\n        case 'SN/auth/GET_CAPTCHA_URL_SUCCESS':\n            return {\n                ...state,\n                ...action.payload\n            }\n        default:\n            return state;\n    }\n}\n\nexport const actions = {\n    setAuthUserData: (userId: number | null, email: string | null, login: string | null, isAuth: boolean) => ({\n        type: 'SN/auth/SET_USER_DATA', payload: {userId, email, login, isAuth}\n    } as const),\n    getCaptchaUrlSuccess: (captchaUrl: string) => ({\n        type: 'SN/auth/GET_CAPTCHA_URL_SUCCESS', payload: {captchaUrl}\n    } as const)\n}\n\nexport const getAuthUserData = (): ThunkType => async (dispatch) => {\n    let meData = await authAPI.me()\n    if (meData.resultCode === ResultCodesEnum.Success) {\n        let {id, login, email} = meData.data;\n        dispatch(actions.setAuthUserData(id, email, login, true))\n    }\n}\n\nexport const login = (email: string, password: string, rememberMe: boolean, captcha: string): ThunkType => async (dispatch) => {\n    let data = await authAPI.login(email, password, rememberMe, captcha);\n    if (data.resultCode === ResultCodesEnum.Success) {\n        // success, get auth data\n        dispatch(getAuthUserData())\n    } else {\n        if (data.resultCode === ResultCodeForCapcthaEnum.CaptchaIsRequired) {\n            dispatch(getCaptchaUrl());\n        }\n\n        let message = data.messages.length > 0 ? data.messages[0] : \"Some error\";\n        dispatch(stopSubmit(\"login\", {_error: message}));\n    }\n}\n\nexport const getCaptchaUrl = (): ThunkType => async (dispatch) => {\n    const data = await securityAPI.getCaptchaUrl()\n    const captchaUrl = data.url\n    dispatch(actions.getCaptchaUrlSuccess(captchaUrl))\n}\n\nexport const logout = (): ThunkType => async (dispatch: any) => {\n    let response = await authAPI.logout()\n\n    if (response.data.resultCode === 0) {\n        dispatch(actions.setAuthUserData(null, null, null, false))\n    }\n}\n\nexport default authReducer;\n\nexport type InitialStateType = typeof initialState;\ntype ActionsType = InferActionsTypes<typeof actions>\ntype ThunkType = BaseThunkType<ActionsType | FormAction>\n","/Users/apollo/Desktop/it/itkamasutra/src/components/common/Paginator/Paginator.tsx",[],"/Users/apollo/Desktop/it/itkamasutra/src/redux/redux-store.ts",[],"/Users/apollo/Desktop/it/itkamasutra/src/components/Users/UsersContainer.tsx",["212"],"import React from 'react'\nimport {connect, DefaultRootState} from 'react-redux'\nimport {\n    follow,\n    unfollow, requestUsers, FilterType\n} from '../../redux/users-reducer'\nimport Users from './Users'\nimport Preloader from '../common/Preloader/Preloader'\nimport {compose} from 'redux'\nimport {\n    getCurrentPage,\n    getFollowingInProgress,\n    getIsFetching,\n    getPageSize,\n    getTotalUsersCount, getUsers, getUsersFilter\n} from '../../redux/users-selectors'\nimport {UserType} from '../../types/types'\nimport {AppStateType} from '../../redux/redux-store'\n\ntype MapStatePropsType = {\n    currentPage: number\n    pageSize: number\n    isFetching: boolean\n    totalUsersCount: number\n    users: Array<UserType>\n    followingInProgress: Array<number>\n    filter: FilterType\n}\n\ntype MapDispatchPropsType = {\n    getUsers: (currentPage: number, pageSize: number, filter: FilterType) => void\n    unfollow: (userId: number) => void\n    follow: (userId: number) => void\n}\n\ntype OwnPropsType = {\n    pageTitle: string\n}\n\ntype PropsType = MapStatePropsType & MapDispatchPropsType & OwnPropsType\n\nclass UsersContainer extends React.Component<PropsType> {\n    componentDidMount() {\n        const {currentPage, pageSize, filter} = this.props\n        this.props.getUsers(currentPage, pageSize, filter)\n    }\n\n    onPageChanged = (pageNumber: number) => {\n        const {pageSize, filter} = this.props\n        this.props.getUsers(pageNumber, pageSize, filter)\n    }\n\n    onFilterChanged = (filter: FilterType) => {\n        const {pageSize} = this.props\n        this.props.getUsers(1, pageSize, filter)\n    }\n\n    render() {\n\n        return <>\n            <h2>{this.props.pageTitle}</h2>\n            {this.props.isFetching ? <Preloader/> : null}\n            <Users totalUsersCount={this.props.totalUsersCount}\n                   pageSize={this.props.pageSize}\n                   currentPage={this.props.currentPage}\n                   onPageChanged={this.onPageChanged}\n                   onFilterChanged={this.onFilterChanged}\n                   users={this.props.users}\n                   follow={this.props.follow}\n                   unfollow={this.props.unfollow}\n                   followingInProgress={this.props.followingInProgress}\n            />\n        </>\n    }\n}\n\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => {\n    return {\n        users: getUsers(state),\n        pageSize: getPageSize(state),\n        totalUsersCount: getTotalUsersCount(state),\n        currentPage: getCurrentPage(state),\n        isFetching: getIsFetching(state),\n        followingInProgress: getFollowingInProgress(state),\n        filter: getUsersFilter(state)\n    }\n}\n\n\nexport default compose(\n    // TStateProps = {}, TDispatchProps = {}, TOwnProps = {}, State = DefaultRootState\n    connect<MapStatePropsType, MapDispatchPropsType, OwnPropsType, AppStateType>(\n        mapStateToProps,\n        {follow, unfollow, getUsers: requestUsers})\n)(UsersContainer)\n","/Users/apollo/Desktop/it/itkamasutra/src/redux/users-selectors.ts",[],"/Users/apollo/Desktop/it/itkamasutra/src/components/Users/Users.tsx",[],"/Users/apollo/Desktop/it/itkamasutra/src/api/api.ts",[],"/Users/apollo/Desktop/it/itkamasutra/src/components/Login/Login.tsx",["213","214"],"import React from 'react';\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\nimport {createField, GetStringKeys, Input} from \"../common/FormsControls/FormsControls\";\nimport {required} from \"../../utils/validators/validators\";\nimport {connect} from \"react-redux\";\nimport {login} from \"../../redux/auth-reducer\";\nimport {Redirect} from \"react-router-dom\";\nimport style from \"./../common/FormsControls/FormsControls.module.css\"\nimport {AppStateType} from '../../redux/redux-store';\n\ntype LoginFormOwnProps = {\n    captchaUrl: string | null\n}\n\nconst LoginForm: React.FC<InjectedFormProps<LoginFormValuesType, LoginFormOwnProps> & LoginFormOwnProps>\n    = ({handleSubmit, error, captchaUrl}) => {\n    return (\n        <form onSubmit={handleSubmit}>\n            {createField<LoginFormValuesTypeKeys>(\"Email\", 'email', [required], Input)}\n            {createField<LoginFormValuesTypeKeys>(\"Password\", \"password\", [required], Input, {type: \"password\"})}\n            {createField<LoginFormValuesTypeKeys>(undefined, \"rememberMe\", [], Input, {type: \"checkbox\"}, \"remember me\")}\n\n            { captchaUrl && <img src={captchaUrl} />}\n            { captchaUrl &&  createField<LoginFormValuesTypeKeys>(\"Symbols from image\", \"captcha\", [required], Input, {}) }\n\n\n            {error && <div className={style.formSummaryError}>\n                {error}\n            </div>\n            }\n            <div>\n                <button>Login</button>\n            </div>\n        </form>\n    )\n}\n\nconst LoginReduxForm = reduxForm<LoginFormValuesType, LoginFormOwnProps>({form: 'login'})(LoginForm)\n\ntype MapStatePropsType = {\n    captchaUrl: string | null\n    isAuth: boolean\n}\ntype MapDispatchPropsType = {\n    login: (email: string, password: string, rememberMe: boolean, captcha: string) => void\n}\n\nexport type LoginFormValuesType = {\n    captcha: string\n    rememberMe: boolean\n    password: string\n    email: string\n}\ntype LoginFormValuesTypeKeys = GetStringKeys<LoginFormValuesType>\n\nconst Login: React.FC<MapStatePropsType & MapDispatchPropsType> = (props) => {\n    const onSubmit = (formData: LoginFormValuesType) => {\n        props.login(formData.email, formData.password, formData.rememberMe, formData.captcha);\n    }\n\n    if (props.isAuth) {\n        return <Redirect to={\"/profile\"}/>\n    }\n\n    return <div>\n        <h1>Login</h1>\n        <LoginReduxForm onSubmit={onSubmit} captchaUrl={props.captchaUrl}/>\n    </div>\n}\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => ({\n    captchaUrl: state.auth.captchaUrl,\n    isAuth: state.auth.isAuth\n})\n\nexport default connect(mapStateToProps, {login})(Login);\n","/Users/apollo/Desktop/it/itkamasutra/src/utils/validators/validators.ts",[],"/Users/apollo/Desktop/it/itkamasutra/src/components/common/FormsControls/FormsControls.tsx",["215"],"import React from \"react\"\nimport styles from \"./FormsControls.module.css\"\nimport {FieldValidatorType} from \"../../../utils/validators/validators\"\nimport {Field, WrappedFieldProps} from \"redux-form\"\nimport {WrappedFieldMetaProps} from 'redux-form/lib/Field'\nimport {LoginFormValuesType} from '../../Login/Login';\n\ntype FormControlPropsType = {\n    meta: WrappedFieldMetaProps\n}\n\nconst FormControl: React.FC<FormControlPropsType> = ({meta: {touched, error}, children}) => {\n    const hasError = touched && error;\n    return (\n        <div className={styles.formControl + \" \" + (hasError ? styles.error : \"\")}>\n            <div>\n                {children}\n            </div>\n            {hasError && <span>{error}</span>}\n        </div>\n    )\n}\n\nexport const Textarea: React.FC<WrappedFieldProps> = (props) => {\n    //const {input, meta, child, ...restProps} = props;\n    const {input, meta, ...restProps} = props;\n    return <FormControl {...props}><textarea {...input} {...restProps} /></FormControl>\n}\n\nexport const Input: React.FC<WrappedFieldProps> = (props) => {\n    //const {input, meta, child, ...restProps} = props;\n    const {input, meta, ...restProps} = props;\n    return <FormControl {...props}><input {...input} {...restProps} /></FormControl>\n}\n\nexport function createField<FormKeysType extends string>(placeholder: string | undefined,\n                            name: FormKeysType,\n                            validators: Array<FieldValidatorType>,\n                            component: React.FC<WrappedFieldProps>,\n                            props = {}, text = \"\") {\n    return <div>\n        <Field placeholder={placeholder} name={name}\n               validate={validators}\n               component={component}\n               {...props}\n        /> {text}\n    </div>\n}\n\nexport type GetStringKeys<T> = Extract<keyof T, string>\n","/Users/apollo/Desktop/it/itkamasutra/src/api/security-api.ts",[],"/Users/apollo/Desktop/it/itkamasutra/src/api/auth-api.ts",[],"/Users/apollo/Desktop/it/itkamasutra/src/api/profile-api.ts",[],"/Users/apollo/Desktop/it/itkamasutra/src/index.tsx",[],"/Users/apollo/Desktop/it/itkamasutra/src/App.tsx",[],"/Users/apollo/Desktop/it/itkamasutra/src/hoc/withSuspense.tsx",[],"/Users/apollo/Desktop/it/itkamasutra/src/components/Header/HeaderContainer.tsx",[],"/Users/apollo/Desktop/it/itkamasutra/src/components/Navbar/Navbar.tsx",["216","217","218"],"import React from 'react';\nimport s from './Navbar.module.css';\nimport {NavLink} from \"react-router-dom\";\n\nconst Navbar: React.FC = () => {\n    return (\n        <nav className={s.nav}>\n            <div className={s.item}>\n                <NavLink to=\"/profile\" activeClassName={s.activeLink}>Profile</NavLink>\n            </div>\n            <div className={`${s.item} ${s.active}`}>\n                <NavLink to=\"/dialogs\" activeClassName={s.activeLink}>Messages</NavLink>\n            </div>\n            <div className={`${s.item} ${s.active}`}>\n                <NavLink to=\"/users\" activeClassName={s.activeLink}>Users</NavLink>\n            </div>\n\n            <div className={s.item}>\n                <a>News</a>\n            </div>\n            <div className={s.item}>\n                <a>Music</a>\n            </div>\n            <div className={s.item}>\n                <a>Settings</a>\n            </div>\n        </nav>\n    )\n}\n\nexport default Navbar;\n","/Users/apollo/Desktop/it/itkamasutra/src/components/Profile/ProfileContainer.tsx",["219","220"],"import React from 'react';\nimport Profile from \"./Profile\";\nimport {connect} from \"react-redux\";\nimport {getStatus, getUserProfile, savePhoto, saveProfile, updateStatus} from \"../../redux/profile-reducer\";\nimport {withRouter, RouteComponentProps} from \"react-router-dom\";\nimport {compose} from \"redux\";\nimport {AppStateType} from '../../redux/redux-store';\nimport {ProfileType} from '../../types/types';\n\ntype MapPropsType = ReturnType<typeof mapStateToProps>\ntype DispatchPropsType = {\n    getUserProfile: (userId: number) => void\n    getStatus: (userId: number) => void\n    updateStatus: (status: string) => void\n    savePhoto: (file: File) => void\n    saveProfile: (profile: ProfileType) => Promise<any>\n}\n\ntype PathParamsType = {\n    userId: string\n}\n\ntype PropsType = MapPropsType & DispatchPropsType & RouteComponentProps<PathParamsType>;\n\nclass ProfileContainer extends React.Component<PropsType> {\n    constructor(props: PropsType) {\n        super(props);\n    }\n\n    refreshProfile() {\n        let userId: number | null = +this.props.match.params.userId;\n        if (!userId) {\n            userId = this.props.authorizedUserId;\n            if (!userId) {\n                // todo: may be replace push with Redirect??\n                this.props.history.push(\"/login\");\n            }\n        }\n\n        if (!userId) {\n            console.error(\"ID should exists in URI params or in state ('authorizedUserId')\");\n        } else {\n            this.props.getUserProfile(userId)\n            this.props.getStatus(userId)\n        }\n    }\n\n    componentDidMount() {\n        this.refreshProfile();\n    }\n\n    componentDidUpdate(prevProps: PropsType, prevState: PropsType) {\n        if (this.props.match.params.userId != prevProps.match.params.userId) {\n            this.refreshProfile();\n        }\n    }\n\n    componentWillUnmount(): void {\n    }\n\n    render() {\n        return (\n            <Profile {...this.props}\n                     isOwner={!this.props.match.params.userId}\n                     profile={this.props.profile}\n                     status={this.props.status}\n                     updateStatus={this.props.updateStatus}\n                     savePhoto={this.props.savePhoto}/>\n        )\n    }\n}\n\nlet mapStateToProps = (state: AppStateType) => {\n    //console.log('mapStateToProps PROFILE')\n    return ({\n        profile: state.profilePage.profile,\n        status: state.profilePage.status,\n        authorizedUserId: state.auth.userId,\n        isAuth: state.auth.isAuth\n    })\n}\n\nexport default compose<React.ComponentType>(\n    connect(mapStateToProps, {getUserProfile, getStatus, updateStatus, savePhoto, saveProfile}),\n    withRouter\n)(ProfileContainer);\n\n\n\n\n","/Users/apollo/Desktop/it/itkamasutra/src/components/Dialogs/DialogsContainer.tsx",[],"/Users/apollo/Desktop/it/itkamasutra/src/components/common/Preloader/Preloader.tsx",["221","222"],"import React from 'react';\nimport preloader from \"../../../assets/images/preloader.svg\";\n\ntype PropsType = {\n}\n\nlet Preloader: React.FC = () => {\n    return <div  style={ { backgroundColor: 'white' } }>\n        <img src={preloader} />\n    </div>\n}\n\nexport default Preloader;\n","/Users/apollo/Desktop/it/itkamasutra/src/components/Profile/Profile.tsx",[],"/Users/apollo/Desktop/it/itkamasutra/src/components/Header/Header.tsx",["223"],"import React from 'react';\nimport s from './Header.module.css';\nimport {NavLink} from \"react-router-dom\";\n\nexport type MapPropsType = {\n    isAuth: boolean\n    login: string | null\n}\nexport type DispatchPropsType = {\n    logout: () => void\n}\n\nconst Header: React.FC<MapPropsType & DispatchPropsType> = (props) => {\n    return <header className={s.header}>\n        <img src='https://www.freelogodesign.org/Content/img/logo-ex-7.png' />\n\n        <div className={s.loginBlock}>\n            { props.isAuth\n                ? <div>{props.login} - <button onClick={props.logout}>Log out</button> </div>\n                : <NavLink to={'/login'}>Login</NavLink> }\n        </div>\n    </header>\n}\n\nexport default Header;\n","/Users/apollo/Desktop/it/itkamasutra/src/components/Dialogs/Dialogs.tsx",["224"],"import React from 'react';\nimport s from './Dialogs.module.css';\nimport DialogItem from \"./DialogItem/DialogItem\";\nimport Message from \"./Message/Message\";\nimport {Redirect} from \"react-router-dom\";\nimport AddMessageForm from \"./AddMessageForm/AddMessageForm\";\nimport {InitialStateType} from '../../redux/dialogs-reducer';\n\ntype PropsType = {\n    dialogsPage: InitialStateType\n    sendMessage: (messageText: string) => void\n}\n\nexport type NewMessageFormValuesType = {\n    newMessageBody: string\n}\n\nconst Dialogs: React.FC<PropsType> = (props) => {\n    let state = props.dialogsPage;\n\n    let dialogsElements = state.dialogs.map( d => <DialogItem name={d.name} key={d.id} id={d.id} />  );\n    let messagesElements = state.messages.map( m => <Message message={m.message} key={m.id} /> );\n\n    let addNewMessage = (values: NewMessageFormValuesType) => {\n        props.sendMessage(values.newMessageBody);\n    }\n\n    return (\n        <div className={s.dialogs}>\n            <div className={s.dialogsItems}>\n                { dialogsElements }\n            </div>\n            <div className={s.messages}>\n                <div>{ messagesElements }</div>\n            </div>\n            <AddMessageForm onSubmit={addNewMessage} />\n        </div>\n    )\n}\n\nexport default Dialogs;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","/Users/apollo/Desktop/it/itkamasutra/src/hoc/withAuthRedirect.tsx",[],"/Users/apollo/Desktop/it/itkamasutra/src/utils/object-helpers.ts",[],"/Users/apollo/Desktop/it/itkamasutra/src/api/users-api.ts",[],"/Users/apollo/Desktop/it/itkamasutra/src/components/Users/User.tsx",["225"],"/Users/apollo/Desktop/it/itkamasutra/src/components/Profile/ProfileInfo/ProfileInfo.tsx",["226"],"import React, {ChangeEvent, useState} from 'react';\nimport s from './ProfileInfo.module.css';\nimport Preloader from \"../../common/Preloader/Preloader\";\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\nimport userPhoto from \"../../../assets/images/user.png\";\nimport ProfileDataForm from \"./ProfileDataForm\";\nimport {ContactsType, ProfileType} from '../../../types/types';\n\ntype PropsType = {\n    profile: ProfileType | null\n    status: string\n    updateStatus: (status: string) => void\n    isOwner: boolean\n    savePhoto: (file: File) => void\n    saveProfile: (profile: ProfileType) => Promise<any>\n}\n\nconst ProfileInfo: React.FC<PropsType> = ({profile, status, updateStatus, isOwner, savePhoto, saveProfile}) => {\n\n    let [editMode, setEditMode] = useState(false);\n\n    if (!profile) {\n        return <Preloader/>\n    }\n\n    const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\n        if (e.target.files && e.target.files.length) {\n            savePhoto(e.target.files[0]);\n        }\n    }\n\n    const onSubmit = (formData: ProfileType) => {\n        // todo: remove then\n        saveProfile(formData).then(\n            () => {\n                setEditMode(false);\n            }\n        );\n    }\n\n    return (\n        <div>\n            <div className={s.descriptionBlock}>\n                <img src={profile.photos.large || userPhoto} className={s.mainPhoto}/>\n                {isOwner && <input type={\"file\"} onChange={onMainPhotoSelected}/>}\n\n                { editMode\n                    ? <ProfileDataForm initialValues={profile} profile={profile} onSubmit={onSubmit}/>\n                    : <ProfileData goToEditMode={() => {setEditMode(true)} } profile={profile} isOwner={isOwner}/> }\n\n                <ProfileStatusWithHooks status={status} updateStatus={updateStatus}/>\n            </div>\n        </div>\n    )\n}\n\ntype ProfileDataPropsType = {\n    profile: ProfileType\n    isOwner: boolean\n    goToEditMode: () => void\n}\nconst ProfileData: React.FC<ProfileDataPropsType> = ({profile, isOwner, goToEditMode}) => {\n    return <div>\n        {isOwner && <div><button onClick={goToEditMode}>edit</button></div>}\n        <div>\n            <b>Full name</b>: {profile.fullName}\n        </div>\n        <div>\n            <b>Looking for a job</b>: {profile.lookingForAJob ? \"yes\" : \"no\"}\n        </div>\n        {profile.lookingForAJob &&\n        <div>\n            <b>My professional skills</b>: {profile.lookingForAJobDescription}\n        </div>\n        }\n\n        <div>\n            <b>About me</b>: {profile.aboutMe}\n        </div>\n        <div>\n            <b>Contacts</b>: {\n            Object\n                .keys(profile.contacts)\n                .map((key)  => {\n            return <Contact key={key} contactTitle={key} contactValue={profile.contacts[key as keyof ContactsType]}/>\n        })}\n        </div>\n    </div>\n}\n\n\ntype ContactsPropsType = {\n    contactTitle: string\n    contactValue: string\n}\nconst Contact: React.FC<ContactsPropsType> = ({contactTitle, contactValue}) => {\n    return <div className={s.contact}><b>{contactTitle}</b>: {contactValue}</div>\n}\n\nexport default ProfileInfo;\n","/Users/apollo/Desktop/it/itkamasutra/src/components/Profile/MyPosts/MyPostsContainer.tsx",["227"],"import React from 'react';\nimport {actions} from \"../../../redux/profile-reducer\";\nimport MyPosts, {DispatchPropsType, MapPropsType} from \"./MyPosts\";\nimport {connect} from \"react-redux\";\nimport {AppStateType} from '../../../redux/redux-store';\n\nconst mapStateToProps = (state: AppStateType) => {\n    return {\n        posts: state.profilePage.posts\n    }\n}\n\nconst MyPostsContainer = connect<MapPropsType, DispatchPropsType, {}, AppStateType>(mapStateToProps, {\n    addPost: actions.addPostActionCreator\n})(MyPosts);\n\nexport default MyPostsContainer;\n","/Users/apollo/Desktop/it/itkamasutra/src/components/Dialogs/Message/Message.tsx",[],"/Users/apollo/Desktop/it/itkamasutra/src/components/Dialogs/DialogItem/DialogItem.tsx",[],"/Users/apollo/Desktop/it/itkamasutra/src/components/Dialogs/AddMessageForm/AddMessageForm.tsx",["228","229","230"],"import React from 'react';\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\nimport {createField, Input, Textarea} from '../../common/FormsControls/FormsControls';\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\nimport {NewMessageFormValuesType} from '../Dialogs';\nimport {LoginFormValuesType} from '../../Login/Login';\n\nconst maxLength50 = maxLengthCreator(50);\n\ntype NewMessageFormValuesKeysType = Extract<keyof NewMessageFormValuesType, string>\ntype PropsType = {}\n\nconst AddMessageForm: React.FC<InjectedFormProps<NewMessageFormValuesType, PropsType> & PropsType>\n    = (props) => {\n    return (\n        <form onSubmit={props.handleSubmit}>\n            <div>\n                {createField<NewMessageFormValuesKeysType>(\"Enter your message\", 'newMessageBody', [required, maxLength50], Textarea)}\n            </div>\n            <div>\n                <button>Send</button>\n            </div>\n        </form>\n    )\n}\n\nexport default reduxForm<NewMessageFormValuesType>({form: 'dialog-add-message-form'})(AddMessageForm);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","/Users/apollo/Desktop/it/itkamasutra/src/components/Profile/ProfileInfo/ProfileDataForm.tsx",[],"/Users/apollo/Desktop/it/itkamasutra/src/components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx",[],"/Users/apollo/Desktop/it/itkamasutra/src/components/Profile/MyPosts/MyPosts.tsx",["231","232","233","234","235"],"import React from 'react';\nimport s from './MyPosts.module.css';\nimport Post from './Post/Post';\nimport {Field, reduxForm} from \"redux-form\";\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\nimport {Textarea} from \"../../common/FormsControls/FormsControls\";\nimport AddPostForm, {AddPostFormValuesType} from './AddPostForm/AddPostForm';\nimport {PostType} from '../../../types/types';\n\n\nexport type MapPropsType = {\n    posts: Array<PostType>\n}\nexport type DispatchPropsType = {\n    addPost: (newPostText: string) => void\n}\n\nconst MyPosts: React.FC<MapPropsType & DispatchPropsType> = props => {\n    let postsElements =\n        [...props.posts]\n            .reverse()\n            .map(p => <Post key={p.id} message={p.message} likesCount={p.likesCount}/>);\n\n    let onAddPost = (values: AddPostFormValuesType) => {\n        props.addPost(values.newPostText);\n    }\n\n    return (\n        <div className={s.postsBlock}>\n            <h3>My posts</h3>\n            <AddPostForm onSubmit={onAddPost}/>\n            <div className={s.posts}>\n                {postsElements}\n            </div>\n        </div>\n    )\n}\n\nconst MyPostsMemorized = React.memo(MyPosts);\n\nexport default MyPostsMemorized;\n","/Users/apollo/Desktop/it/itkamasutra/src/components/Profile/MyPosts/AddPostForm/AddPostForm.tsx",[],"/Users/apollo/Desktop/it/itkamasutra/src/components/Profile/MyPosts/Post/Post.tsx",["236"],"import React from 'react';\nimport s from './Post.module.css';\n\ntype PropsType = {\n    message: string\n    likesCount: number\n}\n\nconst Post: React.FC<PropsType> = (props) => {\n  return (\n    <div className={s.item}>\n      <img src='https://movies4maniacs.liberty.me/wp-content/uploads/sites/1218/2015/09/avatarsucks.jpg' />\n        { props.message }\n          <div>\n        <span>like</span> { props.likesCount }\n      </div>\n    </div>\n  )\n}\n\nexport default Post;\n","/Users/apollo/Desktop/it/itkamasutra/src/components/Users/UsersSearchForm.tsx",["237"],"import React from 'react';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport { FilterType } from '../../redux/users-reducer';\n\nconst usersSearchFormValidate = (values: any) => {\n  const errors = {};\n  return errors;\n}\n\ntype FormType = {\n  term: string\n  friend: 'true' | 'false' | 'null'\n}\n\ntype PropsType = {\n  onFilterChanged: (filter: FilterType) => void\n}\n\nconst UsersSearchForm = (props: PropsType) => {\n\n  const submit = (values: FormType, { setSubmitting }: number) => {\n    const filter = {\n      term: values.term,\n      friend: values.friend\n    }\n    props.onFilterChanged(filter)\n    setSubmitting(false);\n  }\n\n  return (\n    <Formik\n      initialValues={{ term: '' }}\n      validate={usersSearchFormValidate}\n      onSubmit={submit}\n    >\n      {({ isSubmitting }) => (\n        <Form>\n\n          <Field type=\"term\" name=\"text\" />\n          <Field name=\"friend\" as=\"select\">\n            <option value=\"null\">All</option>\n            <option value=\"true\">Only followed</option>\n            <option value=\"false\">Only unfollowed</option>\n          </Field>\n\n          <button type=\"submit\" disabled={isSubmitting}>\n            Submit\n           </button>\n        </Form>\n      )}\n    </Formik>\n  )\n};\n\nexport default UsersSearchForm;",{"ruleId":"238","replacedBy":"239"},{"ruleId":"240","replacedBy":"241"},{"ruleId":"238","replacedBy":"239"},{"ruleId":"240","replacedBy":"241"},{"ruleId":"242","severity":1,"message":"243","line":50,"column":65,"nodeType":"244","messageId":"245","endLine":50,"endColumn":67},{"ruleId":"242","severity":1,"message":"246","line":105,"column":29,"nodeType":"244","messageId":"245","endLine":105,"endColumn":31},{"ruleId":"247","severity":1,"message":"248","line":3,"column":9,"nodeType":"249","messageId":"250","endLine":3,"endColumn":17},{"ruleId":"242","severity":1,"message":"243","line":43,"column":67,"nodeType":"244","messageId":"245","endLine":43,"endColumn":69},{"ruleId":"247","severity":1,"message":"251","line":2,"column":6,"nodeType":"249","messageId":"250","endLine":2,"endColumn":22},{"ruleId":"247","severity":1,"message":"252","line":6,"column":9,"nodeType":"249","messageId":"250","endLine":6,"endColumn":15},{"ruleId":"247","severity":1,"message":"253","line":2,"column":19,"nodeType":"249","messageId":"250","endLine":2,"endColumn":35},{"ruleId":"247","severity":1,"message":"254","line":2,"column":9,"nodeType":"249","messageId":"250","endLine":2,"endColumn":14},{"ruleId":"255","severity":1,"message":"256","line":23,"column":29,"nodeType":"257","endLine":23,"endColumn":53},{"ruleId":"247","severity":1,"message":"258","line":6,"column":9,"nodeType":"249","messageId":"250","endLine":6,"endColumn":28},{"ruleId":"259","severity":1,"message":"260","line":19,"column":17,"nodeType":"257","endLine":19,"endColumn":20},{"ruleId":"259","severity":1,"message":"260","line":22,"column":17,"nodeType":"257","endLine":22,"endColumn":20},{"ruleId":"259","severity":1,"message":"260","line":25,"column":17,"nodeType":"257","endLine":25,"endColumn":20},{"ruleId":"261","severity":1,"message":"262","line":26,"column":5,"nodeType":"263","messageId":"264","endLine":28,"endColumn":6},{"ruleId":"242","severity":1,"message":"243","line":53,"column":44,"nodeType":"244","messageId":"245","endLine":53,"endColumn":46},{"ruleId":"247","severity":1,"message":"265","line":4,"column":6,"nodeType":"249","messageId":"250","endLine":4,"endColumn":15},{"ruleId":"255","severity":1,"message":"256","line":9,"column":9,"nodeType":"257","endLine":9,"endColumn":32},{"ruleId":"255","severity":1,"message":"256","line":15,"column":9,"nodeType":"257","endLine":15,"endColumn":79},{"ruleId":"247","severity":1,"message":"266","line":5,"column":9,"nodeType":"249","messageId":"250","endLine":5,"endColumn":17},{"ruleId":"255","severity":1,"message":"256","line":20,"column":25,"nodeType":"257","endLine":21,"endColumn":60},{"ruleId":"255","severity":1,"message":"256","line":44,"column":17,"nodeType":"257","endLine":44,"endColumn":87},{"ruleId":"247","severity":1,"message":"267","line":1,"column":8,"nodeType":"249","messageId":"250","endLine":1,"endColumn":13},{"ruleId":"247","severity":1,"message":"254","line":2,"column":9,"nodeType":"249","messageId":"250","endLine":2,"endColumn":14},{"ruleId":"247","severity":1,"message":"268","line":3,"column":22,"nodeType":"249","messageId":"250","endLine":3,"endColumn":27},{"ruleId":"247","severity":1,"message":"258","line":6,"column":9,"nodeType":"249","messageId":"250","endLine":6,"endColumn":28},{"ruleId":"247","severity":1,"message":"254","line":4,"column":9,"nodeType":"249","messageId":"250","endLine":4,"endColumn":14},{"ruleId":"247","severity":1,"message":"269","line":4,"column":16,"nodeType":"249","messageId":"250","endLine":4,"endColumn":25},{"ruleId":"247","severity":1,"message":"270","line":5,"column":9,"nodeType":"249","messageId":"250","endLine":5,"endColumn":25},{"ruleId":"247","severity":1,"message":"271","line":5,"column":27,"nodeType":"249","messageId":"250","endLine":5,"endColumn":35},{"ruleId":"247","severity":1,"message":"272","line":6,"column":9,"nodeType":"249","messageId":"250","endLine":6,"endColumn":17},{"ruleId":"255","severity":1,"message":"256","line":12,"column":7,"nodeType":"257","endLine":12,"endColumn":108},{"ruleId":"247","severity":1,"message":"273","line":2,"column":31,"nodeType":"249","messageId":"250","endLine":2,"endColumn":43},"no-native-reassign",["274"],"no-negated-in-lhs",["275"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","Expected '===' and instead saw '=='.","@typescript-eslint/no-unused-vars","'usersAPI' is defined but never used.","Identifier","unusedVar","'InitialStateType' is defined but never used.","'Action' is defined but never used.","'DefaultRootState' is defined but never used.","'Field' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'LoginFormValuesType' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","@typescript-eslint/no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","'PropsType' is defined but never used.","'Redirect' is defined but never used.","'React' is defined but never used.","'Input' is defined but never used.","'reduxForm' is defined but never used.","'maxLengthCreator' is defined but never used.","'required' is defined but never used.","'Textarea' is defined but never used.","'ErrorMessage' is defined but never used.","no-global-assign","no-unsafe-negation"]